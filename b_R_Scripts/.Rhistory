for (i in 1:ncol(immune_reads_log)) {
genes[i] <- list(rep(colnames(immune_reads_log)[i], ncol(counts_blood)))
counts[i] <- list(immune_reads_log[, i])
}
violin_table$genes <- unlist(genes)
violin_table$counts <- unlist(counts)
# Specify the factors of the comparison to put them in the violin plot:
violin_table$genes <- factor(violin_table$genes, levels = colnames(immune_reads_log))
violin_table$groups <- factor(violin_table$groups, levels = c("responder", "non_responder"))
# VIOLIN PLOTS:
# Creates and saves as a pdf the violin plots:
pdf(file = paste(output, "3_Violin_plot_ALOX.pdf", sep = ""),
width = 25, height = 12, onefile = TRUE)
ggplot(violin_table, aes(y = counts, x = groups)) +
geom_violin(aes(fill = groups), trim = FALSE) +
scale_fill_manual(values = c("lightgreen", "firebrick2")) +
facet_wrap("genes", scales = "free_y", ncol = 2) +
scale_y_continuous(name = "Log(CPM)") +
labs(x = "Response to treatment") +
theme(plot.title = element_text(size = 30, hjust = 0.5),
axis.title = element_text(size = 30),
axis.text.x  = element_text(size = 20, hjust = 0.5),
axis.text.y  = element_text(size = 30, hjust = 1),
legend.title = element_text(size = 20),
strip.text.x = element_text(size = 25),
legend.text  = element_text(size = 20),
legend.position = "none",
panel.grid.major = element_blank())
dev.off()
#------------------------------------------ RANDOMFOREST LIPIDOMIC DATA ------------------------------------------#
# Rheumatoid arthritis is a inflammatory disease that characterized for not having a resolution phase in the
# inflammatory procces. One of the most used treatments is modifying antirheumatic drugs (DMARDs), that is not
# always efective.
# We have a dataset of the lipid profiles of rheumatoid arthritis patients that responded or not to the treatment.
# This is the first approach to creat a model using "randomForest" (decision trees).
#---> LIBRARY LOAD:
library(randomForest)
library(mltools)
library(pROC)
set.seed(415) # To get same results even with the random part.
#---> INPUT AND OUTPUT:
# In this section please specify where are the input files and where you want to save the output files.
# In the input and output variable you can see what is the path expected from the user to write.
input <- "C:/Users/hhy270/Documents/GitHub/2018_Machine_Learning_MTX_treatment_in_RA_patients/a_Data/2_randomForest_(RF_models)/"
output <- "C:/Users/hhy270/Documents/GitHub/2018_Machine_Learning_MTX_treatment_in_RA_patients/c_Expected_Output/2_randomForest_(RF_models)/"
# !!!! IMPORTANT: For this script to work the training dataset has to be called: 2_randomForest_(RF_models)_data.txt
# !!!! IMPORTANT: For this script to work the test dataset has to be called: 2_randomForest_(RF_models)_data_validation.txt
#---> DATA MANIPULATION:
# TRAINING SET:
# Data uses to create the model!
# Open the txt file with the profiles information. Make sure that the path is correct:
# The dataset consist in a tab-delimited file in .txt format with the follow specifications:
# Columns: The different lipid mediators plus a column called "responses" that contains information about the
# "Responder" and "Non_Responder".
# Rows: The different samples (each patient data).
# See a_Data/2_randomForest_(RF_models)/2_randomForest_(RF_models)_data.txt
lm_profiles <- read.table(
file = paste(input, "2_randomForest_(RF_models)_data.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
lm_profiles_scale <- as.data.frame(scale(lm_profiles[, -1], center = FALSE, scale = TRUE))
# If all the values from one column are the same, the scalation will give you NA. For those cases, to avoid errors,
# replace the NA for zeros.
lm_profiles_scale[is.na(lm_profiles_scale)] <- 0
# Add the classification variable to the data frame (Responder and non responder):
# Getting the explanatory (x) and response (y) variable. By explanatory, it means all the data that can explain why a
# patient response or not to the treatment (the lipid meadiator profiles) and the response variable is if the
# patients response or not to the treatment. In random Forest you have to create a formula where the response
# variable is explain in terms of the explanatory variable (responses ~ everything else).
lm_profiles_scale$responses <- lm_profiles$responses
# Make sure that column names do not represent a problem to randomForest making them a valid name to R.
names(lm_profiles_scale) <- make.names(names(lm_profiles_scale))
# Separates the profiles data by lipid mediators types.
# By Substrates:
dha <- lm_profiles_scale[ ,c(1:23, 55)]
n_three_DPA <- lm_profiles_scale[ , c(24:33, 55)]
epa <- lm_profiles_scale[ , c(34:36, 55)]
aa <- lm_profiles_scale[ , c(37:54, 55)]
# TEST SET:
# Data use to test the model (independent cohort)!
# The dataset consist in a tab-delimited file in .txt format with the follow specifications:
# Columns: The different lipid mediators plus a column called "responses" that contains information about the
# "Responder" and "Non_Responder".
# Rows: The different samples (each patient data).
val_lm_profiles <- read.table(
file = paste(input, "2_randomForest_(RF_models)_data_validation.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
val_lm_profiles_scale <- as.data.frame(scale(val_lm_profiles[, -1], center = FALSE, scale = TRUE))
val_lm_profiles_scale[is.na(val_lm_profiles_scale)] <- 0
names(val_lm_profiles_scale) <- make.names(names(val_lm_profiles_scale))
# By Substrates:
val_dha <- val_lm_profiles_scale[ ,c(1:23)]
val_n_three_DPA <- val_lm_profiles_scale[ , c(24:33)]
val_epa <- val_lm_profiles_scale[ , c(34:36)]
val_aa <- val_lm_profiles_scale[ , c(37:54)]
#---> MACHINE LEARNING (randomForest R):
# In Random Forests the idea is to decorrelate the several trees which are generated on the different bootstrapped
# samples from training Data and then reduce the variance in the trees by averaging them.
# Averaging the trees also improve the perfomance of decision trees on Test Set and eventually avoid overfitting.
# The idea is to build lots of trees in such a way to make the correlation between the trees smaller.
# BEST MTRY:
# mtry is the number of variables available for splitting at each tree node. Random Forest creates several trees,
# each one using different variables to create the best version of it. With mtry we can define how many variables
# the data is split to create the different trees.
# More: https://stats.stackexchange.com/questions/102867/random-forest-mtry-question
# In this case we defined the lipid mediators to create a loop to define which mtry is the best one for our model.
oob_error <- double(ncol(lm_profiles_scale) - 1) #Define number of variable. -1 is because the last column is responses.
# Loop to select the best mtry.
for (mtry in 1:(ncol(lm_profiles_scale) - 1)) {
# NOTE:
# importance = TRUE creates the plot of the important variables, that can gave us an idea, based on the
# decrease of the accuracy of the models, what lipid mediators are contributing to make a better model.
rf_lm_profiles_scales <- randomForest(responses ~ ., data = lm_profiles_scale, mtry = mtry,
importance = TRUE, ntree = 10000)
oob_error[mtry] <- 100 - ((rf_lm_profiles_scales$err.rate[10000])*100)
}
# Define the best mtry according to the best prediction value.
final_mtry <- which.max(oob_error)
# Run the model again with the right mtry value.
rf_lm_profiles_final <- randomForest(responses ~ ., data = lm_profiles_scale, mtry = final_mtry,
importance = TRUE, ntree = 10000)
pred_rf_lm_profiles <- as.data.frame(predict(rf_lm_profiles_final, val_lm_profiles_scale))
View(pred_rf_lm_profiles)
names(pred_rf_lm_profiles) <- c("prediction")
View(pred_rf_lm_profiles)
mcc_value = mcc(preds = pred_rf_lm_profiles$prediction, actuals = val_lm_profiles$responses) # From the mltools package.
#------------------------------- randomForest VALIDATION AND ROC CURVES  --------~----------------------------------#
# Rheumatoid arthritis is a inflammatory disease that characterized for not having a resolution phase in the inflammatory
# procces. One of the most used treatments is Methotrexate (MTX), that is not always efective.
# We have a dataset of the lipid profiles of rheumatoid arthritis patients that responded or not to the treatment.
# This is the first approach to compare all the accuracy results from all the models using Matthews Correlation
# Coefficient (MCC).
#---> LIBRARY LOAD:
library("mltools")
#---> DATA MANIPULATION:
# Create data frames where the validation results will be saved:
mcc_tables_val <- data.frame(groups = character(),
mcc_value = numeric())
mcc_tables_tra <- data.frame(groups = character(),
mcc_value = numeric())
# Creates a vector with all the validations sets:
groups <- c("n-3 DPA", "AA", "Resolvins_d", "Protectins", "PCTRS", "Maresins", "MCTR", "RVT", "D-Series Resolvins",
"PD", "LX", "LTB", "Leukotrienes", "Prostaglandins", "lmprofile", "dha", "epa", "dha_dpa_epa", "best_lm")
#---> MODEL VALIDATION:
# With Validation set:
# Creates a loop that open all the validation results for each model and then calculates the MCC (Mathews Coefficient
# Correlation).
for (lm in 1:length(groups)) {
# Open the corresponding prediction file (CLASSYFIRE):
predictions <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/validation sets/pred_",
groups[lm], ".txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
# Change the name of the column from the prediction file:
names(predictions) <- c("prediction")
# Creates a data frame that contains the real classification of the validation set samples:
response_val_set <- data.frame(row.names = row.names(predictions),
responses = c(rep("responder", 37), rep("non-responder", 8)))
# Creates a data frame with the MCC value of the specific model.
mcc_result <- data.frame(groups = groups[lm],
mcc_value = mcc(preds = predictions$prediction,        # This bit is the code that calculates
actuals = response_val_set$responses)) # the MCC value.
# Add the result to the final table:
mcc_tables_val <- rbind(mcc_tables_val, mcc_result)
# Open the corresponding prediction file (RANDOM FOREST):
predictions <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/validation sets/rf_pred_",
groups[lm], ".txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
# Change the name of the column from the prediction file:
names(predictions) <- c("prediction")
# Creates a data frame that contains the real classification of the validation set samples:
response_val_set <- data.frame(row.names = row.names(predictions),
responses = c(rep("responder", 37), rep("non-responder", 8)))
# Creates a data frame with the MCC value of the specific model.
mcc_result <- data.frame(groups = paste("rf_", groups[lm], sep = ""),
mcc_value = mcc(preds = predictions$prediction,        # This bit is the code that calculates
actuals = response_val_set$responses)) # the MCC value.
# Add the result to the final table:
mcc_tables_val <- rbind(mcc_tables_val, mcc_result)
}
# With Training set:
# Do the same that the previous loop except that it uses the training set. It's only to confirm that the model is
# working properly.
for (lm in 1:length(groups)) {
predictions_tra <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/training_sets/pred_",
groups[lm], "_training.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
names(predictions_tra) <- c("prediction")
response_tra_set <- data.frame(row.names = row.names(predictions_tra),
responses = c(rep("responder", 30), rep("non-responder", 22)))
mcc_result_tra <- data.frame(groups = groups[lm],
mcc_value = mcc(preds = predictions_tra$prediction,
actuals = response_tra_set$responses))
mcc_tables_tra <- rbind(mcc_tables_tra, mcc_result_tra)
predictions_tra <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/training_sets/rf_pred_",
groups[lm], "_training.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
names(predictions_tra) <- c("prediction")
response_tra_set <- data.frame(row.names = row.names(predictions_tra),
responses = c(rep("responder", 30), rep("non-responder", 22)))
mcc_result_tra <- data.frame(groups = paste("rf_", groups[lm], sep = ""),
mcc_value = mcc(preds = predictions_tra$prediction,
actuals = response_tra_set$responses))
mcc_tables_tra <- rbind(mcc_tables_tra, mcc_result_tra)
}
#------------------------------- randomForest VALIDATION AND ROC CURVES  --------~----------------------------------#
# Rheumatoid arthritis is a inflammatory disease that characterized for not having a resolution phase in the inflammatory
# procces. One of the most used treatments is Methotrexate (MTX), that is not always efective.
# We have a dataset of the lipid profiles of rheumatoid arthritis patients that responded or not to the treatment.
# This is the first approach to compare all the accuracy results from all the models using Matthews Correlation
# Coefficient (MCC).
#---> LIBRARY LOAD:
library("mltools")
#---> DATA MANIPULATION:
# Create data frames where the validation results will be saved:
mcc_tables_val <- data.frame(groups = character(),
mcc_value = numeric())
mcc_tables_tra <- data.frame(groups = character(),
mcc_value = numeric())
# Creates a vector with all the validations sets:
groups <- c("n-3 DPA", "AA", "Resolvins_d", "Protectins", "PCTRS", "Maresins", "MCTR", "RVT", "D-Series Resolvins",
"PD", "LX", "LTB", "Leukotrienes", "Prostaglandins", "lmprofile", "dha", "epa", "dha_dpa_epa", "best_lm")
#---> MODEL VALIDATION:
# With Validation set:
# Creates a loop that open all the validation results for each model and then calculates the MCC (Mathews Coefficient
# Correlation).
for (lm in 1:length(groups)) {
# Open the corresponding prediction file (CLASSYFIRE):
predictions <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/validation sets/pred_",
groups[lm], ".txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
# Change the name of the column from the prediction file:
names(predictions) <- c("prediction")
# Creates a data frame that contains the real classification of the validation set samples:
response_val_set <- data.frame(row.names = row.names(predictions),
responses = c(rep("responder", 37), rep("non-responder", 8)))
# Creates a data frame with the MCC value of the specific model.
mcc_result <- data.frame(groups = groups[lm],
mcc_value = mcc(preds = predictions$prediction,        # This bit is the code that calculates
actuals = response_val_set$responses)) # the MCC value.
# Add the result to the final table:
mcc_tables_val <- rbind(mcc_tables_val, mcc_result)
# Open the corresponding prediction file (RANDOM FOREST):
predictions <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/validation sets/rf_pred_",
groups[lm], ".txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
# Change the name of the column from the prediction file:
names(predictions) <- c("prediction")
# Creates a data frame that contains the real classification of the validation set samples:
response_val_set <- data.frame(row.names = row.names(predictions),
responses = c(rep("responder", 37), rep("non-responder", 8)))
# Creates a data frame with the MCC value of the specific model.
mcc_result <- data.frame(groups = paste("rf_", groups[lm], sep = ""),
mcc_value = mcc(preds = predictions$prediction,        # This bit is the code that calculates
actuals = response_val_set$responses)) # the MCC value.
# Add the result to the final table:
mcc_tables_val <- rbind(mcc_tables_val, mcc_result)
}
# With Training set:
# Do the same that the previous loop except that it uses the training set. It's only to confirm that the model is
# working properly.
for (lm in 1:length(groups)) {
predictions_tra <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/training_sets/pred_",
groups[lm], "_training.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
names(predictions_tra) <- c("prediction")
response_tra_set <- data.frame(row.names = row.names(predictions_tra),
responses = c(rep("responder", 30), rep("non-responder", 22)))
mcc_result_tra <- data.frame(groups = groups[lm],
mcc_value = mcc(preds = predictions_tra$prediction,
actuals = response_tra_set$responses))
mcc_tables_tra <- rbind(mcc_tables_tra, mcc_result_tra)
predictions_tra <- read.table(
file = paste("C:/Users/hhy270/Dropbox/Rheumatoid arthritis/input/6_MCC_calculations/training_sets/rf_pred_",
groups[lm], "_training.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
names(predictions_tra) <- c("prediction")
response_tra_set <- data.frame(row.names = row.names(predictions_tra),
responses = c(rep("responder", 30), rep("non-responder", 22)))
mcc_result_tra <- data.frame(groups = paste("rf_", groups[lm], sep = ""),
mcc_value = mcc(preds = predictions_tra$prediction,
actuals = response_tra_set$responses))
mcc_tables_tra <- rbind(mcc_tables_tra, mcc_result_tra)
}
View(mcc_result)
View(mcc_tables_val)
#------------------------------------------ RANDOMFOREST LIPIDOMIC DATA ------------------------------------------#
# Rheumatoid arthritis is a inflammatory disease that characterized for not having a resolution phase in the
# inflammatory procces. One of the most used treatments is modifying antirheumatic drugs (DMARDs), that is not
# always efective.
# We have a dataset of the lipid profiles of rheumatoid arthritis patients that responded or not to the treatment.
# This is the first approach to creat a model using "randomForest" (decision trees).
#---> LIBRARY LOAD:
library(randomForest)
library(mltools)
library(pROC)
set.seed(415) # To get same results even with the random part.
#---> INPUT AND OUTPUT:
# In this section please specify where are the input files and where you want to save the output files.
# In the input and output variable you can see what is the path expected from the user to write.
input <- "C:/Users/hhy270/Documents/GitHub/2018_Machine_Learning_MTX_treatment_in_RA_patients/a_Data/2_randomForest_(RF_models)/"
output <- "C:/Users/hhy270/Documents/GitHub/2018_Machine_Learning_MTX_treatment_in_RA_patients/c_Expected_Output/2_randomForest_(RF_models)/"
# !!!! IMPORTANT: For this script to work the training dataset has to be called: 2_randomForest_(RF_models)_data.txt
# !!!! IMPORTANT: For this script to work the test dataset has to be called: 2_randomForest_(RF_models)_data_validation.txt
#---> DATA MANIPULATION:
# TRAINING SET:
# Data uses to create the model!
# Open the txt file with the profiles information. Make sure that the path is correct:
# The dataset consist in a tab-delimited file in .txt format with the follow specifications:
# Columns: The different lipid mediators plus a column called "responses" that contains information about the
# "Responder" and "Non_Responder".
# Rows: The different samples (each patient data).
# See a_Data/2_randomForest_(RF_models)/2_randomForest_(RF_models)_data.txt
lm_profiles <- read.table(
file = paste(input, "2_randomForest_(RF_models)_data.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
lm_profiles_scale <- as.data.frame(scale(lm_profiles[, -1], center = FALSE, scale = TRUE))
# If all the values from one column are the same, the scalation will give you NA. For those cases, to avoid errors,
# replace the NA for zeros.
lm_profiles_scale[is.na(lm_profiles_scale)] <- 0
# Add the classification variable to the data frame (Responder and non responder):
# Getting the explanatory (x) and response (y) variable. By explanatory, it means all the data that can explain why a
# patient response or not to the treatment (the lipid meadiator profiles) and the response variable is if the
# patients response or not to the treatment. In random Forest you have to create a formula where the response
# variable is explain in terms of the explanatory variable (responses ~ everything else).
lm_profiles_scale$responses <- lm_profiles$responses
# Make sure that column names do not represent a problem to randomForest making them a valid name to R.
names(lm_profiles_scale) <- make.names(names(lm_profiles_scale))
# Separates the profiles data by lipid mediators types.
# By Substrates:
dha <- lm_profiles_scale[ ,c(1:23, 55)]
n_three_DPA <- lm_profiles_scale[ , c(24:33, 55)]
epa <- lm_profiles_scale[ , c(34:36, 55)]
aa <- lm_profiles_scale[ , c(37:54, 55)]
# TEST SET:
# Data use to test the model (independent cohort)!
# The dataset consist in a tab-delimited file in .txt format with the follow specifications:
# Columns: The different lipid mediators plus a column called "responses" that contains information about the
# "Responder" and "Non_Responder".
# Rows: The different samples (each patient data).
val_lm_profiles <- read.table(
file = paste(input, "2_randomForest_(RF_models)_data_validation.txt", sep = ""),
header = TRUE,
row.names = 1, # Specify that the first column is row names.
sep = "\t")
val_lm_profiles_scale <- as.data.frame(scale(val_lm_profiles[, -1], center = FALSE, scale = TRUE))
val_lm_profiles_scale[is.na(val_lm_profiles_scale)] <- 0
names(val_lm_profiles_scale) <- make.names(names(val_lm_profiles_scale))
# By Substrates:
val_dha <- val_lm_profiles_scale[ ,c(1:23)]
val_n_three_DPA <- val_lm_profiles_scale[ , c(24:33)]
val_epa <- val_lm_profiles_scale[ , c(34:36)]
val_aa <- val_lm_profiles_scale[ , c(37:54)]
#---> MACHINE LEARNING (randomForest R):
# In Random Forests the idea is to decorrelate the several trees which are generated on the different bootstrapped
# samples from training Data and then reduce the variance in the trees by averaging them.
# Averaging the trees also improve the perfomance of decision trees on Test Set and eventually avoid overfitting.
# The idea is to build lots of trees in such a way to make the correlation between the trees smaller.
# BEST MTRY:
# mtry is the number of variables available for splitting at each tree node. Random Forest creates several trees,
# each one using different variables to create the best version of it. With mtry we can define how many variables
# the data is split to create the different trees.
# More: https://stats.stackexchange.com/questions/102867/random-forest-mtry-question
# In this case we defined the lipid mediators to create a loop to define which mtry is the best one for our model.
oob_error <- double(ncol(lm_profiles_scale) - 1) #Define number of variable. -1 is because the last column is responses.
# Loop to select the best mtry.
for (mtry in 1:(ncol(lm_profiles_scale) - 1)) {
# NOTE:
# importance = TRUE creates the plot of the important variables, that can gave us an idea, based on the
# decrease of the accuracy of the models, what lipid mediators are contributing to make a better model.
rf_lm_profiles_scales <- randomForest(responses ~ ., data = lm_profiles_scale, mtry = mtry,
importance = TRUE, ntree = 10000)
oob_error[mtry] <- 100 - ((rf_lm_profiles_scales$err.rate[10000])*100)
}
# Define the best mtry according to the best prediction value.
final_mtry <- which.max(oob_error)
# Run the model again with the right mtry value.
rf_lm_profiles_final <- randomForest(responses ~ ., data = lm_profiles_scale, mtry = final_mtry,
importance = TRUE, ntree = 10000)
# Save relevant Plots:
pdf(file = paste(output, "2_RF_lmprofiles_scale.pdf", sep = ""),
width = 14, height = 10, onefile = TRUE)
varImpPlot(rf_lm_profiles_final, sort = TRUE, main = "lm_profiles") # Importance of the variable for the model.
plot(rf_lm_profiles_final, main = "lm_profiles") # Decreasing of the error base on the number of tres.
legend("topright", inset=.05, title="Curves:",
c("Non responder", "OOB error", "Responder"), fill=c("red", "black", "green"),
text.font = 3, cex = 1)
dev.off()
#---> VALIDATION TEST:
# "prediction" takes the created models and the test dataset to try to predict which samples belongs to the
# responder and non-responder.
pred_rf_lm_profiles <- as.data.frame(predict(rf_lm_profiles_final, val_lm_profiles_scale))
names(pred_rf_lm_profiles) <- c("prediction")
# In order to further evaluate the predictivenss of this approach we next calculated  Matthews correlation
# coefficient (MCC), which represents the accuracy of the model at predicting outcome. Very helpful when you
# have imbalance data.
mcc_value = mcc(preds = pred_rf_lm_profiles$prediction, actuals = val_lm_profiles$responses) # From the mltools package.
# "prediction" it also allows to calculate the probability of a sample to be belong to one group or another.
# This values can be then used to make a ROC curve.
pred_rf_lm_profiles_p <- as.data.frame(predict(rf_lm_profiles_final, val_lm_profiles_scale, type = "prob"))
roc_value = roc(val_lm_profiles$responses, pred_rf_lm_profiles_p$`Non_Responder`) # ROC curve calculation.
# Creates a table with all the models, the %CC, AUC and the MCC.
# An error estimate is made for the cases which were not used while building the tree. That is called an
# OOB (Out-of-bag) error estimate which is mentioned as a percentage.
# In this case, then, if a model has 1% error will means that we can predict with 99% accuracy.
no_oob_error_table <- data.frame(groups = "scalated lm profiles",
percentage_accuracy = 100 - ((rf_lm_profiles_final$err.rate[10000])*100),
MCC = mcc_value,
AUC = roc_value$auc,
stringsAsFactors = FALSE)
# Save the models as an R object:
# To avoid running all the scripts to obtain the models, it can be saved as R objects. If you want to use it,
# you can call it using "readRDS".
saveRDS(rf_lm_profiles_final,
file = paste(output, "2_RF_lmprofiles_scale.R", sep = ""),
ascii = FALSE, version = NULL, compress = TRUE, refhook = NULL)
#---> RF PER GROUP:
# Create a list with the names of all the subgroups:
# Modifying the original lipid mediator file, including other data (such as clinical scores) and dividing the table
# in different sections is possible to create automatically all the models you want. YOU NEED TO MAKE SURE WHATSOEVER
# that the "groups" list and the names of the "groups" list is updated.
groups <- list(dha, n_three_DPA, epa, aa) # Update in case you want to create other models.
val_groups <- list(val_dha, val_n_three_DPA, val_epa, val_aa) # Update in case you want to create other models.
# Create a vector with the names associated to all the elements in the list:
names(groups) <- c("DHA", "n-3 DPA", "EPA", "AA") # Update in case you want to create other models.
# The loop goes through all the elements in gropus and creates a model for each of them. The model can not work with
# only one row, so the "if" makes sure that only the subgroups with more than one row are analyzed.
for (lm in 1:length(groups)) {
if (ncol(groups[[lm]]) > 2) {
# Identifying the best mtry:
oob_error_all <- double(ncol(groups[[lm]]) - 1)
for (mtry_all in 1:(ncol(groups[[lm]]) - 1)) {
random_forest <- randomForest(responses ~ ., data = groups[[lm]], mtry = mtry_all,
importance = TRUE, ntree = 10000)
oob_error_all[mtry_all] <- 100 - ((random_forest$err.rate[10000])*100)
}
# Creating the final model:
final_mtry_all <- which.max(oob_error_all)
random_forest_final <- randomForest(responses ~ ., data = groups[[lm]], mtry = final_mtry_all,
importance = TRUE, ntree = 10000)
# Model Graphs:
pdf(file = paste(output, "2_RF_",
names(groups)[[lm]], ".pdf", sep = ""),
width = 14, height = 10, onefile = TRUE)
varImpPlot(random_forest_final, sort = TRUE, main = names(groups)[[lm]]) # Importance of the variable for the model.
plot(random_forest_final, main = names(groups)[[lm]]) # Decreasing of the error base on the number of tres.
legend("topright", inset=.05, title="Curves:",
c("Non responder", "OOB error", "Responder"), fill=c("red", "black", "green"),
text.font = 3, cex = 1)
dev.off()
# Validation:
pred_val <- as.data.frame(predict(random_forest_final, val_groups[[lm]]))
names(pred_val) <- c("prediction")
mcc_val = mcc(preds = pred_val$prediction, actuals = val_lm_profiles$responses)
# ROC curves:
pred_val_p <- as.data.frame(predict(random_forest_final, val_groups[[lm]], type = "prob"))
roc_val = roc(val_lm_profiles$responses, pred_val_p$`Non_Responder`) # ROC curve calculation.
# Accuracy table:
accuracy_table <- data.frame(groups = names(groups)[[lm]],
percentage_accuracy = 100 - ((random_forest_final$err.rate[10000])*100),
MCC = mcc_val,
AUC = roc_val$auc,
stringsAsFactors = FALSE)
no_oob_error_table <- rbind(no_oob_error_table, accuracy_table)
# Save final model:
saveRDS(random_forest_final,
file = paste(output, "2_RF_",
names(groups)[[lm]], ".R", sep = ""),
ascii = FALSE, version = NULL, compress = TRUE, refhook = NULL)
}
else { next }
}
# OUTPUT:
# Besides the functional models, the OUTPUT of this script is a table with Accuracy score of the model and the
# validation of the model based on the MCC value.
# The resulting plots also gave us an idea of the performance of the models, that includes the "importance" analysis,
# and the improvement of the model based on the number of tress used to create it.
no_oob_error_table[, c(2)] <- round(no_oob_error_table[, c(2)], digits = 0)
no_oob_error_table[, c(3, 4)] <- round(no_oob_error_table[, c(3, 4)], digits = 2)
write.table(no_oob_error_table,
file = paste(output, "2_accuracy_table_RF.txt", sep = ""),
sep = "\t",
quote = FALSE,
row.names = FALSE)
View(no_oob_error_table)
